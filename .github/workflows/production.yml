name: production

on:
  push:
    branches:
      - master
  pull_request:
    branches:
      - master

env:
  SSH: ssh -T ${{ secrets.SSH_USER }}@${{ secrets.SSH_HOST }}
  WORKDIR: birthday-reminder-backend
  ENV_FILE: .production.env
  DOCKER_COMPOSE_FILE: docker-compose.production.yml

jobs:
  build:
    runs-on: ubuntu-latest
    environment: production

    steps:
      - uses: actions/checkout@v3

      - name: Build image
        run: docker build -t ${{ secrets.DOCKERHUB_ACCOUNT }}/${{ secrets.DOCKERHUB_IMAGE_NAME }} -f Dockerfile.production .

      - name: Login to DockerHub
        run: echo ${{ secrets.DOCKERHUB_TOKEN }} | docker login -u ${{ secrets.DOCKERHUB_USERNAME }} --password-stdin

      - name: Push image to Docker Hub
        run: docker push ${{ secrets.DOCKERHUB_ACCOUNT }}/${{ secrets.DOCKERHUB_IMAGE_NAME }}

  deploy:
    runs-on: ubuntu-latest
    environment: production
    needs: build

    steps:
      - uses: actions/checkout@v3

      - name: SSH setting
        run: |
          mkdir -p ~/.ssh/
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_rsa
          echo "${{ secrets.SSH_KNOWN_HOSTS }}" > ~/.ssh/known_hosts
          chmod 600 ~/.ssh/id_rsa

      - name: Create docker-compose file
        run: |
          ${{ env.SSH }} rm -rf ${{ env.WORKDIR }}
          ${{ env.SSH }} mkdir -p ${{ env.WORKDIR }}
          cat ${{ env.DOCKER_COMPOSE_FILE }} | ${{ env.SSH }} 'cat > ${{ env.WORKDIR }}/${{ env.DOCKER_COMPOSE_FILE }}'

      - name: Create env file
        run: |
          ${{ env.SSH }} echo 'DB_DRIVER=${{ secrets.DB_DRIVER }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'DB_USER=${{ secrets.DB_USER }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'DB_PASSWORD=${{ secrets.DB_PASSWORD }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'DB_HOST=${{ secrets.DB_HOST }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'DB_NAME=${{ secrets.DB_NAME }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'DB_PORT=${{ secrets.DB_PORT }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'POSTGRES_USER=${{ secrets.DB_USER }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'POSTGRES_PASSWORD=${{ secrets.DB_PASSWORD }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'POSTGRES_DB=${{ secrets.DB_NAME }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'PGPORT=${{ secrets.DB_PORT }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'NODE_ENV=${{ secrets.NODE_ENV }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'JWT_TOKEN_SECRET_KEY=${{ secrets.JWT_TOKEN_SECRET_KEY }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'JWT_TOKEN_EXPIRATION_TIME=${{ secrets.JWT_TOKEN_EXPIRATION_TIME }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'JWT_REFRESH_TOKEN_SECRET_KEY=${{ secrets.JWT_REFRESH_TOKEN_SECRET_KEY }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'JWT_REFRESH_TOKEN_EXPIRATION_TIME=${{ secrets.JWT_REFRESH_TOKEN_EXPIRATION_TIME }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'MAIL_HOST=${{ secrets.MAIL_HOST }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'MAIL_PORT=${{ secrets.MAIL_PORT }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'MAIL_USER=${{ secrets.MAIL_USER }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'MAIL_PASSWORD=${{ secrets.MAIL_PASSWORD }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'API_URL=${{ secrets.API_URL }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'
          ${{ env.SSH }} echo 'UI_URL=${{ secrets.UI_URL }} >> ${{ env.WORKDIR }}/${{ env.ENV_FILE }}'

      - name: Stop containers
        run: ${{ env.SSH }} docker-compose -f ${{ env.WORKDIR }}/${{ env.DOCKER_COMPOSE_FILE }} down

      - name: Run containers
        run: ${{ env.SSH }} docker-compose -f ${{ env.WORKDIR }}/${{ env.DOCKER_COMPOSE_FILE }} up --build -d
